{"ast":null,"code":"import { PROBLEMS } from \"../mock-problems\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    // 变量problem,初始化为PROBLEMS：\n    this.problems = PROBLEMS;\n  }\n  // 获取所有problems\n  getProblems() {\n    // getProblems(): Problem[] {\n    // return this.problems;\n    return this.http.get(\"api/v1/problems\"); //调用这个api，返回observable <type>\n  }\n  // 获取某一problem\n  getProblem(id) {\n    // getProblem(id: number): Problem {\n    // return this.problems.find((problem) => problem.id === id);\n    // return this.http.get(\"api/v1/problems/${id}\")\n    //                   .then((res: Response) => res.json())\n    //                   .catch(this.handleError)\n    return this.http.get(\"api/v1/problems/${id}\");\n  }\n  // addProblem(problem: Problem): Observable<Problem>{\n  addProblem(problem) {\n    problem.id = this.problems.length + 1;\n    this.problems.push(problem);\n    // return this.http.post<Problem>('/api/v1/problems', problem, httpOptions) //problem参数\n    //   .pipe(\n    //     catchError(this.handleError<Problem>('addProblem faild', problem))\n    //   );\n  }\n}\n\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAQA,QAAQ,QAAO,kBAAkB;AACzC,SAAqBC,WAAW,QAAS,sBAAsB;;;AAK/D,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIF,WAAW,CAAC;IAAE,cAAc,EAAE;EAAkB,CAAE;CAChE;AAKD,OAAM,MAAOG,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAExB;IACA,aAAQ,GAAcN,QAAQ;EAHS;EAMvC;EACAO,WAAW;IAEX;IACE;IAEA,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAY,iBAAiB,CAAC,EAAC;EACrD;EAEA;EACAC,UAAU,CAACC,EAAU;IAErB;IACE;IAEA;IACA;IACA;IAEA,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAU,uBAAuB,CAAC;EACxD;EAEA;EAEAG,UAAU,CAACC,OAAgB;IACzBA,OAAO,CAACF,EAAE,GAAG,IAAI,CAACG,QAAQ,CAACC,MAAM,GAAG,CAAC;IACrC,IAAI,CAACD,QAAQ,CAACE,IAAI,CAACH,OAAO,CAAC;IAE3B;IACA;IACA;IACA;EACF;;;AAxCWR,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAY,SAAXZ,WAAW;EAAAa,YAFV;AAAM","names":["PROBLEMS","HttpHeaders","httpOptions","headers","DataService","constructor","http","getProblems","get","getProblem","id","addProblem","problem","problems","length","push","factory","providedIn"],"sourceRoot":"","sources":["/Users/wawa/Projects/Collaborative-Online-Coding/oj-client/src/app/services/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Problem } from \"../models/problem.model\";\nimport {PROBLEMS} from \"../mock-problems\";\nimport { HttpClient, HttpHeaders, } from '@angular/common/http';\nimport { Observable, throwError,from,of } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as bodyParser from 'body-parser';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private http: HttpClient) {}\n\n  // 变量problem,初始化为PROBLEMS：\n  problems: Problem[] = PROBLEMS;\n\n\n  // 获取所有problems\n  getProblems(): Observable<Problem[]> {\n  \n  // getProblems(): Problem[] {\n    // return this.problems;\n\n    return this.http.get<Problem[]>(\"api/v1/problems\") //调用这个api，返回observable <type>\n  }\n\n  // 获取某一problem\n  getProblem(id: number): Observable<Problem> {\n\n  // getProblem(id: number): Problem {\n    // return this.problems.find((problem) => problem.id === id);\n    \n    // return this.http.get(\"api/v1/problems/${id}\")\n    //                   .then((res: Response) => res.json())\n    //                   .catch(this.handleError)\n    \n    return this.http.get<Problem>(\"api/v1/problems/${id}\")\n  }\n\n  // addProblem(problem: Problem): Observable<Problem>{\n\n  addProblem(problem: Problem): void{\n    problem.id = this.problems.length + 1;\n    this.problems.push(problem)\n\n    // return this.http.post<Problem>('/api/v1/problems', problem, httpOptions) //problem参数\n    //   .pipe(\n    //     catchError(this.handleError<Problem>('addProblem faild', problem))\n    //   );\n  }\n\n  // private handleError<Problem> (operation = 'operation', result: Problem) {\n  //   return (error: any): Observable<Problem> => {\n \n  //     // TODO: send the error to remote logging infrastructure\n  //     console.error(error); // log to console instead\n  //     return error;\n  //   };\n  // }\n\n  // private handleError<T> (operation = 'operation', result?: T) {\n  //   return (error: any): Observable<T> => {\n \n  //     // TODO: send the error to remote logging infrastructure\n  //     console.error(error); // log to console instead\n  //     // Let the app keep running by returning an empty result.\n  //     return of(result as T);\n  //   };\n  // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}