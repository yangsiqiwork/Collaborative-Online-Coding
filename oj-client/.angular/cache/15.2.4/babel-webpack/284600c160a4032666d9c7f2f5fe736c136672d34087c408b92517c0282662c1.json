{"ast":null,"code":"// import {PROBLEMS} from \"../mock-problems\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(http) {\n      this.http = http;\n    }\n    // 变量problem,初始化为PROBLEMS：\n    // problems: Problem[] = PROBLEMS;\n    // 获取所有problems\n    getProblems() {\n      // return this.problems;\n      return this.http.get(\"api/vi/problem\"); //调用这个api，返回observable <type>\n    }\n    // 获取某一problem\n    getProblem(id) {\n      // return this.problems.find((problem) => problem.id === id);\n      // return this.http.get(\"api/v1/problems/${id}\")\n      //                   .then((res: Response) => res.json())\n      //                   .catch(this.hendleError)\n      return this.http.get(\"api/vi/problem\");\n    }\n    addProblem(problem) {\n      // problem.id = this.problems.length + 1;\n      // this.problems.push(problem)\n      return this.http.post('/api/v1/problems', problem, httpOptions) //problem参数\n      .pipe(catchError(this.handleError('addProblem faild', problem)));\n    }\n    // private handleError<Problem> (operation = 'operation', result: Problem) {\n    //   return (error: any): Observable<Problem> => {\n    //     // TODO: send the error to remote logging infrastructure\n    //     console.error(error); // log to console instead\n    //     return error;\n    //   };\n    // }\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n  }\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}